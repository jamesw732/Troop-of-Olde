Implementation todo list.

===========================ACTIVE===============================
Consolidate the database for the static game data (no need to handle player data yet,
this is still a future problem). I don't think I'll need an SQLite database for the static
data, just need to rework the structure. In particular:
- Flatten players.json to not differentiate between the combat state and physical state.
Just have one login state for characters, which will require significant refactoring of
the Character class and states.
- Change all jsons to not use ids, instead use names, which will be unique.
- Make a separate npcs.json file which defines stuff like model, stats, etc. Should also flatten
these as in players.json. Then, the zones will define NPC names along with positions/rotations.


Flattening player.json will be a pretty big project, so I'm going to try to detail
the processes for logging in and creating an NPC. Don't try to make it even more complicated
by also updating the items/powers/effects jsons to use names instead of IDs yet.
Logging in:
1. The player joins the server and loads their character's data in from players.json
2. The client aggregates the character's login data, I think it would be possible to have
a LoginState that just stores everything, including the engine attributes, combat stats, inventory,
equipment, powers. This should be the cleanest way to avoid having tons of arguments.
The client should store this state, as it will help create the character after the server sends its
response.
3. The server's world creates the character from the transmitted data. It will need to convert the
inventory, equipment, and powers to real objects, but this work is already done. Will need to simplify
ServerCharacter and Character to just accept **kwargs, and then overwrite all of the attrs.
4. Once the new character is created, the server needs to retransmit it to all the clients.
The data it needs to send is, of course, different depending on whether it's the player's character or not.
Create a PCSpawnState and an NPCSpawnState for this.
PCSpawnState will contain:
- All physical/stat attrs
- Lists of int instance ids for item containers and powers
NPCSpawnState will contain:
- All physical attrs
- Reduced stat attrs (maybe just health, maxhealth, energy, maxenergy)
5. When each client receives this data, they must then create the character, most of this work is done already.
Main thing to change is how we handle items and powers, which will use the saved LoginState to match instance
ids with database ids (eventually names). Will also need to make ClientCharacter just accept **kwargs.



Development Plan:
- Convert ServerCharacter to just accept **kwargs, and maybe make Character not accept anything,
just instantiate defaults (maybe read from default_attrs, but will want None for equipment/inventory)
- Flatten players.json to just make every single key a Character attr.



===================================NEXT================================================
Finish adding animations.
Animation checklist:
- Add weapon models
- Combat animation (weapons)
- Jumping animation
- Backwards walk animation
- Sideways walk animations?
- Death

Once animations are done, I want to continue to make some bigger moves.

- Flesh out the UI. Add enemy status window (health/energy/effects), add effects to own
status window, add tooltips to items and powers.
- Add respawns and looting.
- Add NPC AI logic



=========================================BACKLOG=================================================
Generic Code cleanup:
- Replace some "if" checks and "get"s with try/except blocks. I rely too hard on crash errors,
I should instead leverage warnings that don't break the game. Would require thinking to see
how best to do this.
- Current on_destroy functions for characters, controllers, etc are kind of complicated and
will need to be extended for further cleanup (ie, ui cleanup eventually). I like the idea of
having a callable class that just stores a list of on_destroy callbacks, and calls each
one sequentially.


Networking:
- Add sequence count to network calls where order of arrival matters, for example
skill level ups and receiving containers.
- Login sequence should be more back and forth, it shouldn't just be the server spitting out
different responses and hoping they arrive in order.
- Will eventually need to encapsulate server and client creation in Server and Client classes. 
- Consider moving network to be client/server dependent.
- Need to fix disconnect, I think can just destroy the controller and character?


Player Controller:
- Jumping is incorrect, not sure exactly what's wrong with it.
- Camera should probably be handled separately from PlayerController.
- Consider making PlayerController a singleton not attached to world.


Physics:
- Implement momentum, make it be a list of the 5 most recent keyboard movement vectors. They are
averaged and added as a displacement factor if no keyboard inputs for that physics tick.
- Considering adding more raycasts besides just at the feet. Will be necessary for stairs
- Use a loop for raycasts to not collide through concave intersections
- Improve wall collision logic, namely removing ability to jump up walls.


Combat:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness


Character:
- Stats object should probably have a more elegant interaction with Characters. Would
be nice to unify Stats with all the different Effect types.
- Would really like to not have so many arguments to Character, would it be possible
to make a new State which combines existing States? Probably...
- Need to fix default inventory/equipment



Powers:
- Add a channeled power.
- Need to add client-side reconciliation for powers
- Add a UI window showing persistent powers
- Make persistent powers unique per character
- Improve powers/effects database, will need to think about this a lot
- Bug happens when trying to use a queued power with no energy


UI:
UI is quite incomplete, there is a lot of helpful information that should be tracked by the UI:
- player's target's health
- in combat/not
- persistent effects

Some missing functionality
- Loot window
- Hover and right click tooltips, which will be the primary visual guide for the UI
- Swapping of action bar slots
- Destroying items

Bugs
- Scrolling with mousewheel while scrollbar is full results in division by zero
- Transparency handling for the game window is buggy since the scrollbar has its own collider.
Basically, the current handling for mouse enter/exit is fragile - entering on and exiting from a
child entity with a collider doesn't correctly trigger the transparency change. Unclear how to fix
this, worst case can remove the collider.
- There's also a bug with new text entering the game window with the wrong transparency. I think
text should probably be ignored by set_alpha altogether.

Cleanup
- Pull functions out from UI __init__'s so that the UI class has more control over what
happens during creation. Mapping container ids to ItemFrames is a good example of this,
that will need to be done for all future containers, so the UI should have a function for
doing that.


Database:
Move to an SQL database instead of using json.


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture,
formulas used, philosophy, game mechanics, class content. These files essentially serves as the
implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.



=====================================DISTANT==============================================
- Save system
- Character/item models/textures
- World building; terrain, textures, buildings
- NPC logic
- Music
- Icons
- UI Art
