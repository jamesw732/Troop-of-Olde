Implementation todo list.

===========================ACTIVE===============================
Current Steps:


I think all the id maps that are currently in network should be moved to world.
Actually, uuid_to_connection will need to stay in Network, but this is pretty fitting.
This will mean:
- Shared API character, item, power won't rely on Network anymore, the world will be
responsible for giving them ids.
- Network won't secretly rely on controller, character, item, power, effect. Ownership
of those objects becomes much clearer.
- Controllers won't have access to uiud maps. This is a good thing, that stuff should
all be done network side. Controllers will still get access to object to id maps (which
are just object attributes), which is necessary to make networking requests.


So, todo list:
- Fix Characted deaths - remove all references to the Character and the controller from the
controller, then destroy Character and controller.
- Add functions to World for creating characters, powers, items, and controllers to handle
all the instance id stuff currently done in the base classes. Each will need to be equipped with
a local on_destroy method which removes its instance id from the corresponding map.
Remove corresponding id handling from the corresponding__init__ methods.
- Move id to object maps to World, including functions ids_to_container and container_to_ids (also
rename to ids_to_items and items_to_ids).
- Remove all references to object maps from files besides world_requests and world_responses.


Afterwards:
- Remove disconnect.py from shared API. Actually, completely re-implement disconnect mostly
from scratch.
- Update developer.tex


Could character.py safely be the bottom-most dependency after states.py?
Would require making Character not instantiate powers/items. I think this would
be good, but might require reworking powers.

Should the UI code have access to controllers?

===================================NEXT================================================
Fix character origin bug

Add animations.
General goal is to get basic placeholder animations for everything in the game.
This will be placeholder until stage 2 of development.

It may be worthwhile to encapsulate animation logic in its own class.
Try to do the animation logic without its own class, but if it becomes too cumbersome,
don't hesitate to extract it to its own class.

=========================================BACKLOG=================================================
Generic Code cleanup:
- Replace some "if" checks and "get"s with try/except blocks. I rely too hard on crash errors,
I should instead leverage warnings that don't break the game. Would require thinking to see
how best to do this.


Networking:
- Add sequence count to network calls where order of arrival matters, for example
skill level ups and receiving containers.
- Login sequence should be more back and forth, it shouldn't just be the server spitting out
different responses and hoping they arrive in order.
- Should probably encapsulate server and client creation in Server and Client classes. 
- Consider moving id maps in Network to World. Makes dependency tree more pure, but maybe
not the most intuitive choice.
- Consider moving network to be client/server dependent. Would require working lower level logic.
- Move Network.broadcast_cbstate_update to World


Player Controller:
- Jumping is sometimes very buggy, but sometimes fine? I think I need to smooth out the client
side prediction. Maybe take the average of the past 5 diffs or something?
- Camera should probably be handled separately from PlayerController.
- Consider making PlayerController a singleton not attached to world.


Physics:
- Implement momentum, make it be a list of the 5 most recent keyboard movement vectors. They are
averaged and added as a displacement factor if no keyboard inputs for that physics tick.
- Considering adding more raycasts besides just at the feet. Will be necessary for stairs
- Use a loop for raycasts to not collide through concave intersections
- Improve wall collision logic, namely removing ability to jump up walls.


Combat:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness


Character:
Stats object should probably have a more elegant interaction with Characters. Would
be nice to unify Stats with all the different Effect types.


Powers:
- Add a channeled power.
- Need to add client-side reconciliation for powers
- Add a UI window showing persistent powers
- Make persistent powers unique per character
- Improve powers/effects database, will need to think about this a lot
- Bug happens when trying to use a queued power with no energy


UI:
UI is quite incomplete, there is a lot of helpful information that should be tracked by the UI:
- player's target's health
- in combat/not
- persistent effects

Some missing functionality
- Loot window
- Hover and right click tooltips, which will be the primary visual guide for the UI
- Swapping of action bar slots
- Destroying items

Bugs
- Scrolling with mousewheel while scrollbar is full results in division by zero
- Transparency handling for the game window is buggy since the scrollbar has its own collider.
Basically, the current handling for mouse enter/exit is fragile - entering on and exiting from a
child entity with a collider doesn't correctly trigger the transparency change. Unclear how to fix
this, worst case can remove the collider.
- There's also a bug with new text entering the game window with the wrong transparency. I think
text should probably be ignored by set_alpha altogether.

Cleanup
- Pull functions out from UI __init__'s so that the UI class has more control over what
happens during creation. Mapping container ids to ItemFrames is a good example of this,
that will need to be done for all future containers, so the UI should have a function for
doing that.


Database:
Move to an SQL database instead of using json.


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture,
formulas used, philosophy, game mechanics, class content. These files essentially serves as the
implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.



=====================================DISTANT==============================================
- Save system
- Character/item models/textures
- World building; terrain, textures, buildings
- NPC logic
- Music
- Icons
- UI Art
