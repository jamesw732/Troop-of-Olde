Implementation todo list.

===========================ACTIVE===============================
Finish adding animations.
Animation checklist:
- Add weapon models
- Combat animation (weapons)
- Jumping animation
- Backwards walk animation
- Sideways walk animations?
- Death


Two parts to adding weapons:
- Adding/removing them to/from the scene
- Managing animations

Just work on adding/removing weapons to/from the scene for now.
Will need to consider how it ties into the rest of the procedure for moving items.

Todo list:
- Make client predict where it thinks items are going to go. This should make
the inventory more responsive to double clicks, especially with high ping
- Converting request_swap_items into request_move_item, instead takes item inst
id. Will need to store item container/location. This will make server-side item
moves not depend on what the client thinks the game state is.
- Document changes to new item movement philosophy in developer.tex.






===================================NEXT================================================
Once animations are done, I want to continue to make some bigger moves.

- Clean up networking code and game logic. Basically, for every functionality implemented,
go through it from start to finish and think about what data needs to be transferred.
The necessary questions for each input are:
    What does my client need to do?
    What data does my client need to send to the server?
    What does the server need to do?
    What does the server need to send back to my client?
    What does the server need to send back to other clients?
    What does my client need to do in response?
    What do other clients have to do in response?
- Flesh out the UI. Add enemy status window (health/energy/effects), add effects to own
status window, add tooltips to items and powers.
- Add respawns and looting.
- Add NPC AI logic
- Fix networking neglects, including disconnects, animations, etc.



=========================================BACKLOG=================================================
Generic Code cleanup:


Networking:
- Add sequence count to network calls where order of arrival matters, for example
skill level ups and receiving containers.
- Login sequence should be more back and forth, it shouldn't just be the server spitting out
different responses and hoping they arrive in order.
- Will eventually need to encapsulate server and client creation in Server and Client classes. 
- Consider moving network to be client/server dependent.
- Need to fix disconnect, I think can just destroy the controller and character?


Player Controller:
- Jumping is incorrect, not sure exactly what's wrong with it.
- Camera should probably be handled separately from PlayerController.
- Consider making PlayerController a singleton not attached to world.


Physics:
- Implement momentum, make it be a list of the 5 most recent keyboard movement vectors. They are
averaged and added as a displacement factor if no keyboard inputs for that physics tick.
- Considering adding more raycasts besides just at the feet. Will be necessary for stairs
- Use a loop for raycasts to not collide through concave intersections
- Improve wall collision logic, namely removing ability to jump up walls.


Combat:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness


Character:
- Stats object should probably have a more elegant interaction with Characters. Would
be nice to unify Stats with all the different Effect types.
- Would really like to not have so many arguments to Character, would it be possible
to make a new State which combines existing States? Probably...
- Need to fix default inventory/equipment



Powers:
- Add a channeled power.
- Need to add client-side reconciliation for powers
- Add a UI window showing persistent powers
- Make persistent powers unique per character
- Improve powers/effects database, will need to think about this a lot
- Bug happens when trying to use a queued power with no energy


UI:
UI is quite incomplete, there is a lot of helpful information that should be tracked by the UI:
- player's target's health
- in combat/not
- persistent effects

Some missing functionality
- Loot window
- Hover and right click tooltips, which will be the primary visual guide for the UI
- Swapping of action bar slots
- Destroying items

Bugs
- Scrolling with mousewheel while scrollbar is full results in division by zero
- Transparency handling for the game window is buggy since the scrollbar has its own collider.
Basically, the current handling for mouse enter/exit is fragile - entering on and exiting from a
child entity with a collider doesn't correctly trigger the transparency change. Unclear how to fix
this, worst case can remove the collider.
- There's also a bug with new text entering the game window with the wrong transparency. I think
text should probably be ignored by set_alpha altogether.

Architecture:
- Pull functions out from UI __init__'s so that the UI class has more control over what
happens during creation. Mapping container ids to ItemFrames is a good example of this,
that will need to be done for all future containers, so the UI should have a function for
doing that.
- ItemIcon should eventually be pulled out of items_window.py once items exist outside of 
the player items window. They should then be created by UI, which should also now store
inst_id_to_item_icon.


Database:
Move to an SQL database instead of using json.


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture,
formulas used, philosophy, game mechanics, class content. These files essentially serves as the
implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.



=====================================DISTANT==============================================
- Save system
- Character/item models/textures
- World building; terrain, textures, buildings
- NPC logic
- Music
- Icons
- UI Art
