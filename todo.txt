This file contains a heap-like todo list, with the following priorities:
Right now - These are things that I'm actively doing whenever I spend time developing
Next - These are things that I need to do next, after I'm finished with what I'm doing right now
Backlog - These are things that could be done, but are not high priority
Distant - These are abstract ideas about things that will need to be done eventually


===========================RIGHT NOW===============================
Clean up the code to a passable level. Remove all smells, and fix any buggy behavior. This involves everything
below:

1. Consider changing the internal equipment and inventory containers to just be lists.
Pros:
- Sending dictionaries over the network is cumbersome, lists are easier.
- A dict mapping ints casted to strs (as in the json) is just really smelly
Cons:
- Can't store incomplete states into disk, pretty much need the full list (and some way to encode an
empty element)
- Equipment slot naming becomes slightly less clear. Could just add a separate function that passes a key
(for example an equipment slot) into the dict, and then maps that back to an index. Probably clunky but worth
thinking about.

2. Figure out the kinks in the physics system, such as not being able to jump twice in a row or
shooting up the wall. Also includes reducing usage of numpy.

3. Change the split between character/npc/pc.
Just have one Character class and delegate all differences to the classes
PlayerController, NPCController, MobController

- PlayerController will handle inputs and send them to the server, and
eventually does client-side prediction for movement.
- NPCController will control NPCs on the client side, which is a very
restricted functionality. Will essentially just process inputs from the server 
and handle LERPing.
- MobController will control the character functionality on the server side.
Should think of PlayerController as a remote interface into
MobController that works through network requests. This means it will handle
combat and (eventually) movement. NPC AI will be handled in another class,
since that's supposed to represent the player's literal actions.

4. Refactor connect.py, it's easily the messiest file in the repository.

5. Clean up the repository enough to make it presentable. I think it should be public.
This will involve cleaning up the big documentation article, or at least putting a disclaimer
that it's incomplete, and fixing the README. I think it should be a tour of the repository rather than
a pre-push checklist.






===================================NEXT================================================
Start making non-lateral moves.

Rework task documentation/ideas. For now, I think the following files will suffice:
- A todo list (this one)
- A tex document which basically documents EVERYTHING - code architecture, formulas used/implementation
    details, philosophy (monetization, development practices, what makes a game fun), game mechanics/features,
    lore(?), class content, documentation plan.
This file essentially serves as the implementation definition.
- Stuff like technical_debt, performance_improvements should get moved to github issues. Basically, anything
more distant than "Backlog" and more specific than "Distant" belongs in a Github issue.

Test everything. Just some baseline functionality for every main feature. 

Client side prediction and server authoritative physics. Fixed timestep physics.

Make item movement smoother - maybe if mouse velocity is high or has moved sufficiently, start dragging the item
immediately rather than waiting







=========================================BACKLOG=================================================
This is mostly low-priority stuff that expands upon the baseline implementation that was created before
having the perfect vision of what the final product will be like. It's best to not do things from here until
you're very confident in a decision.

Combat/Character:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness

UI:
Reconsider all the current windows to better represent what I'll want the UI to look like in the final product.
Certainly doesn't have to look good yet, but should be functional and not clunky.
Hover and right click tooltips will be the primary visual guide for the UI.






=====================================DISTANT==============================================
This is old.
- Combat system (effects, spells, abilities, npc logic) - Python/Ursina
- Databasing for mobs, items, etc - json at first, then sqlite/sqlalchemy
- UI - Ursina
- Character models - Blender (AI?)
- Character textures - Blender (AI?)
- World terrain - Perlin noise (+ Panda3D or maybe handwritten)
- World structures - Blender (AI?)
- World textures - Blender builtin https://cloud.blender.org/p/textures/5813449c1f474213fb4babc5
