Implementation todo list.

===========================ACTIVE===============================
Starting to get the feeling that States shouldn't be so loose. Might be worthwhile to change to an
inheritance-based system rather than making them basically entirely typeless.
Would still have to register a bunch of states, but this isn't too bad. For organization purposes, make them
static methods.



===================================NEXT================================================
Work on powers.
Add individual cooldowns for powers, and animations for cooldowns/gcd

Add more types of powers.
Want one of each of the following:
Instant enchantment (a heal spell),
Persistent enchantment (a buff),
Persistent curse (a debuff)
Channeled enchantment (a channeled heal)
Channeled curse (a channeled damage spell)

Also work out the neglected functionality (things like energy cost, etc)


Start adding some character assets and animations. Huge project.

=========================================BACKLOG=================================================
Code cleanup:
Replace some "if" checks and "get"s with try/except blocks. I rely too hard on crash errors,
I should instead leverage warnings that don't break the game.

Physics:
Implement momentum, make it be a list of the 5 most recent keyboard movement vectors. They are
averaged and added as a displacement factor if no keyboard inputs for that physics tick.
Add more raycasts for collision logic.
Use a loop for raycasts to not collide through concave intersections
Improve wall collision logic, namely removing ability to jump up walls.
Jumping is very buggy

Combat/Character:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness


UI:
UI is quite incomplete, there is a lot of helpful information that should be tracked by the UI.
Off the top of my head:
- player's target
- in combat/not
- persistent effects (future)
- Enemy drops (future)

Current UI functionality is also quite lacking.
- Hover and right click tooltips, which will be the primary visual guide for the UI
- Allow swapping of action bar slots
- Allow destroying items

There are some bugs as well:
- Scrolling with mousewheel while scrollbar is full results in division by zero
- Transparency handling for the game window is buggy since the scrollbar has its own collider. Basically,
the current handling for mouse enter/exit is fragile - entering on and exiting from a child entity
with a collider doesn't correctly trigger the transparency change. Unclear how to fix this, worst case
can remove the collider.
- There's also a bug with new text entering the game window with the wrong transparency. I think text should
probably be ignored by set_alpha altogether.


Database:
Move to sql


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture, formulas used,
philosophy, game mechanics, class content. These files essentially serves as the implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.




=====================================DISTANT==============================================
- Save system
- Icons for items/powers/etc
- Character models - Blender (AI?)
- Character textures - Blender (AI?)
- World terrain - Perlin noise (+ Panda3D or maybe handwritten)
- World structures - Blender (AI?)
- World textures - Blender builtin https://cloud.blender.org/p/textures/5813449c1f474213fb4babc5
