Implementation todo list.

===========================ACTIVE===============================
Refine the splits between the code layers.
I want layers like:
- Input Layer: Handle player/npc inputs, send networking requests, update local game state
through external API, potentially update UI
- Request Layer: Send networking requests to server which update game state via public
API, update server managers, and send networking updates
- Server API: public-facing functions and classes which update the server's game
state and sends networking responses
- Response Layer: Send networking responses to client which update the game state
via public API as well as the UI
- Client API: public-facing functions and classes which update the client's game state
- UI: Displays game relevant parts of the game state to the player
- Internal API: Internal state and helper functions, shared between client and server.

Steps:
Build input handler layer:
- Pull input-handling parts of PlayerController into an InputHandler class and
keep PlayerController as part of the Client API, rather than part of the input
layer. This should make the UI network requests easier to extract.
- Remove networking requests from lower level modules, including UI
- Pull UI input handling into the input handler

- Refactor networking so that client has world_requests interface, world_responses implementation,
and server has world_responses interface, world_requests implementation.
- Make InputHandler and server.controllers import requests/responses code, remove all other imports.
- Consider refactoring GameState to depend on client/server. This will probably only be possible
if shared code doesn't have to rely on the gamestate, which it probably shouldn't.
Or, maybe, the GameState object shouldn't exist at all, since it only exists to avoid circular dependencies,
which the new structure should avoid.
- Consider refactoring singletons to be created more intelligently, not immediately after definition.

- Update developer.tex

===================================NEXT================================================
General goal is to get basic placeholder animations for everything in the game.
This will be placeholder until stage 2 of development.

It may be worthwhile to encapsulate animation logic in its own class.
Try to do the animation logic without its own class, but if it becomes too cumbersome,
don't hesitate to extract it to its own class.

=========================================BACKLOG=================================================
Generic Code cleanup:
- Replace some "if" checks and "get"s with try/except blocks. I rely too hard on crash errors,
- I should instead leverage warnings that don't break the game.
- Consider changing usage of States in the code. Maybe remove cname from PhysicalState
I wonder if I should just have a State called "LoginState"? Might cause issues with size, but it
would be a lot more clear what's actually going on.
Should, at the very least, make "State" a more well-defined class.

Networking:
Add sequence count to network calls where order of arrival matters, for example
skill level ups.

Physics:
Implement momentum, make it be a list of the 5 most recent keyboard movement vectors. They are
averaged and added as a displacement factor if no keyboard inputs for that physics tick.
Add more raycasts for collision logic.
Use a loop for raycasts to not collide through concave intersections
Improve wall collision logic, namely removing ability to jump up walls.
Jumping is sometimes very buggy, but sometimes fine?


Combat:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness


Character:
Stats object should probably have a more elegant interaction with Characters. Would
be nice to unify Stats with all the different Effect types.


Powers:
Add a channeled power.
Need to add client-side reconciliation for powers
Add a UI window showing persistent powers
Make persistent powers unique per character
Improve powers/effects database, will need to think about this a lot


UI:
UI is quite incomplete, there is a lot of helpful information that should be tracked by the UI:
- player's target's health
- in combat/not
- persistent effects

Some missing functionality:
- Loot window
- Hover and right click tooltips, which will be the primary visual guide for the UI
- Swapping of action bar slots
- Destroying items

There are some bugs as well:
- Scrolling with mousewheel while scrollbar is full results in division by zero
- Transparency handling for the game window is buggy since the scrollbar has its own collider.
Basically, the current handling for mouse enter/exit is fragile - entering on and exiting from a
child entity with a collider doesn't correctly trigger the transparency change. Unclear how to fix
this, worst case can remove the collider.
- There's also a bug with new text entering the game window with the wrong transparency. I think
text should probably be ignored by set_alpha altogether.


Database:
Move to an SQL database instead of using json.


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture,
formulas used, philosophy, game mechanics, class content. These files essentially serves as the
implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.



=====================================DISTANT==============================================
- Save system
- Character/item models/textures
- World building; terrain, textures, buildings
- NPC logic
- Music
- Icons
- UI Art
