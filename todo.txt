Implementation todo list.

===========================ACTIVE===============================
Current Steps:
- Remove GameState entirely:
input_handler is unused
playercontroller can be a global singleton, will need to rewrite some stuff but shouldn't be hard
world can be a global singleton
ui can just be a global singleton
The hard part will be figuring out what to do with gs.pc and gs.chars. chars is hardly used at all,
maybe it can just be taken out until I need it. pc is harder, but could maybe just get it through
PlayerController?
- Remove disconnect.py from shared API. The best way to do this is uncertain.
- Move UI directory into client
- add imports to __init__.py and make client/server import from there, rather than individual files.


- Update developer.tex


Unclear steps:
I think it would be good to remove patterns of avoiding circular dependence by mutating class
variables. This really muddies the dependence structure - even though character.py doesn't
import controllers.py, it still has access to objects defined in controllers.py. This should
not be the case.
Will need to reconsider the following:
- GameState defining higher level variables as None, and being mutated to access them.
Maybe move all singletons outside of GameState?
- Character referencing its controller.

Cleanup level steps:
- Camera should probably be handled separately from PlayerController.
- Networking requests spawned by UI probably should be further down the stack from the UI code,
but this is probably not a huge deal.
- Should probably encapsulate server and client creation in Server and Client classes. 
- Move networking calls 


===================================NEXT================================================
General goal is to get basic placeholder animations for everything in the game.
This will be placeholder until stage 2 of development.

It may be worthwhile to encapsulate animation logic in its own class.
Try to do the animation logic without its own class, but if it becomes too cumbersome,
don't hesitate to extract it to its own class.

=========================================BACKLOG=================================================
Generic Code cleanup:
- Replace some "if" checks and "get"s with try/except blocks. I rely too hard on crash errors,
I should instead leverage warnings that don't break the game.

Networking:
Add sequence count to network calls where order of arrival matters, for example
skill level ups and receiving containers.

Player Controller:
Jumping is sometimes very buggy, but sometimes fine? I think I need to smooth out the client
side prediction. Maybe take the average of the past 5 diffs or something?


Physics:
Implement momentum, make it be a list of the 5 most recent keyboard movement vectors. They are
averaged and added as a displacement factor if no keyboard inputs for that physics tick.
Add more raycasts for collision logic.
Use a loop for raycasts to not collide through concave intersections
Improve wall collision logic, namely removing ability to jump up walls.


Combat:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness


Character:
Stats object should probably have a more elegant interaction with Characters. Would
be nice to unify Stats with all the different Effect types.


Powers:
Add a channeled power.
Need to add client-side reconciliation for powers
Add a UI window showing persistent powers
Make persistent powers unique per character
Improve powers/effects database, will need to think about this a lot


UI:
UI is quite incomplete, there is a lot of helpful information that should be tracked by the UI:
- player's target's health
- in combat/not
- persistent effects

Some missing functionality:
- Loot window
- Hover and right click tooltips, which will be the primary visual guide for the UI
- Swapping of action bar slots
- Destroying items

There are some bugs as well:
- Scrolling with mousewheel while scrollbar is full results in division by zero
- Transparency handling for the game window is buggy since the scrollbar has its own collider.
Basically, the current handling for mouse enter/exit is fragile - entering on and exiting from a
child entity with a collider doesn't correctly trigger the transparency change. Unclear how to fix
this, worst case can remove the collider.
- There's also a bug with new text entering the game window with the wrong transparency. I think
text should probably be ignored by set_alpha altogether.


Database:
Move to an SQL database instead of using json.


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture,
formulas used, philosophy, game mechanics, class content. These files essentially serves as the
implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.



=====================================DISTANT==============================================
- Save system
- Character/item models/textures
- World building; terrain, textures, buildings
- NPC logic
- Music
- Icons
- UI Art
