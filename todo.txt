This file contains a heap-like todo list, with the following priorities:

RIGHT NOW:
These are things that I'm actively doing whenever I spend time developing. Things get popped
off of here once they're done. Should really only have one thing on here at once.

NEXT:
These are things which I have a good idea of why I need to do it and how I need to do it.
Things in here get pushed to "Right now" once I decide to spend active development time on it.

BACKLOG:
These are things that are either low priority, or I'm not sure how it's going to work yet, but
I at least have some idea of what I want. Things in here get moved to "Next" or even "Right now"
once I have a good idea of what I want. This section should be the most vast, and enough so that it
makes sense to split things up by type.

DISTANT:
These are abstract ideas about things that will need to be done eventually, but I haven't thought about.
Generally, these are huge tasks that I need to seriously split up to be able to parse.


===========================RIGHT NOW===============================




===================================NEXT================================================
Consider changing the internal equipment and inventory containers to just be lists.
Pros:
- Sending dictionaries over the network is cumbersome, lists are easier.
- A dict mapping ints casted to strs (as in the json) is just really smelly
Cons:
- Can't store incomplete states into disk, pretty much need the full list (and some way to encode an
empty element)
- Equipment slot naming becomes slightly less clear. Could just add a separate function that passes a key
(for example an equipment slot) into the dict, and then maps that back to an index. Probably clunky but worth
thinking about.


Fix physics bugs. Walking into npc, jumping head first into the side of a ceiling
Client side prediction and server authoritative physics. Fixed timestep physics.





=========================================BACKLOG=================================================
Combat/Character:
Neglected formulas:
- probability to upgrade skill
- hit chance/accuracy
- dual wield attack rate

Incomplete subcontent:
- Weapon types
- Effects/powers, not nearly enough types at the moment.

Incomplete stat implementations:
- Energy
- Armor
- All the modifiers
- Regeneration
- Hardiness

UI:
In general, a lot of the UI will be reconsidered as I get a better idea of what the final product will
look like. The current UI is very much a baseline. Current UI could be more optimized, primarily by
changing to a paradigm that uses Sequences and fixed updates rather than the update function, but
this is very low priority unless it affects performance. If it affects performance, it could be a bottleneck
to using Ursina.


Otherwise, there are some definite changes:
Hover and right click tooltips will be the primary visual guide for the UI, this is definitely something
that could be implemented right away.



Database:
Move to sql


Documentation:
Ideally, I want some big tex files that document everything important, such as code architecture, formulas used,
philosophy, game mechanics, class content. These files essentially serves as the implementation definition.

Also, should eventually move things onto Github issues once the repository is more stable.


Tests:
Tests currently are very broken and limited in functionality. Codebase is too volatile to sustain tests
at the moment, once things are more stable it will be a good idea to test things.
Could also consider test-driven development, where I should understand the interface of the code before
writing the code.




=====================================DISTANT==============================================
- Save system
- Icons for items/powers/etc
- Character models - Blender (AI?)
- Character textures - Blender (AI?)
- World terrain - Perlin noise (+ Panda3D or maybe handwritten)
- World structures - Blender (AI?)
- World textures - Blender builtin https://cloud.blender.org/p/textures/5813449c1f474213fb4babc5
